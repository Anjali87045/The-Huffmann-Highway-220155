compresed.txt

decoded.txt
Congratulations, you decoded the text and got the input file. i hope you learned a lot of concepts through this project. Keep up the good work and keep progressing. 

huffmann.cpp
#include <bits/stdc++.h>
using namespace std;

class HuffmanNode {
public:
    char data;
    int freq;
    HuffmanNode* left;
    HuffmanNode* right;

    HuffmanNode(char data, int freq) : data(data), freq(freq), left(nullptr), right(nullptr) {}
    //HuffmanNode('a',100);'
};

class Compare {
public:
    bool operator()(HuffmanNode* left, HuffmanNode* right) {
        return left->freq > right->freq;
    }
};

class HuffmanCoding {
private:
    HuffmanNode* root;
    unordered_map<char, string> huffmanCode;
    unordered_map<char, int> freqMap;

    void buildFrequencyMap(const string& data);
    void buildHuffmanTree();
    void generateCodes(HuffmanNode* node, const string& str);
    void writeEncodedData(const string& data, ofstream& outputFile);

public:
    HuffmanCoding() : root(nullptr) {}
    ~HuffmanCoding();
    void compress(const string& inputFileName, const string& outputFileName);
};

void HuffmanCoding::buildFrequencyMap(const string& data) {
    for (char ch : data) {
        freqMap[ch]++;
    }
}

void HuffmanCoding::buildHuffmanTree() {
    priority_queue<HuffmanNode*, vector<HuffmanNode*>, Compare> minHeap;

    for (auto pair : freqMap) {
        minHeap.push(new HuffmanNode(pair.first, pair.second));
    }


    while (minHeap.size() != 1) {
        HuffmanNode* left = minHeap.top(); minHeap.pop();
        HuffmanNode* right = minHeap.top(); minHeap.pop();

        int sum = left->freq + right->freq;
        HuffmanNode* node = new HuffmanNode('\0', sum);
        node->left = left;
        node->right = right;

        minHeap.push(node);
    }

    root = minHeap.top();
}

void HuffmanCoding::generateCodes(HuffmanNode* node, const string& str) {
    if (!node) return;

    if (node->data != '\0') {
        huffmanCode[node->data] = str;
    }

    generateCodes(node->left, str + "0");
    generateCodes(node->right, str + "1");
}

void HuffmanCoding::writeEncodedData(const string& data, ofstream& outputFile) {
    string encodedString;
    for (char ch : data) {
        encodedString += huffmanCode[ch];
    }
    outputFile << encodedString;
}

HuffmanCoding::~HuffmanCoding() {
    // Implement a proper destructor to free the allocated memory
    function<void(HuffmanNode*)> deleteTree = [&](HuffmanNode* node) {
        if (!node) return;
        deleteTree(node->left);
        deleteTree(node->right);
        delete node;
    };
    deleteTree(root);
}

void HuffmanCoding::compress(const string& inputFileName, const string& outputFileName) {
    ifstream inputFile(inputFileName, ios::in);
    if (!inputFile.is_open()) {
        cerr << "Error opening input file!" << endl;
        return;
    }

    string data((istreambuf_iterator<char>(inputFile)), istreambuf_iterator<char>());
    inputFile.close();

    buildFrequencyMap(data);
    buildHuffmanTree();
    generateCodes(root, "");

    ofstream outputFile(outputFileName, ios::out);
    if (!outputFile.is_open()) {
        cerr << "Error opening output file!" << endl;
        return;
    }

    writeEncodedData(data, outputFile);
    outputFile.close();
}

int main() {
    HuffmanCoding huffman;
    string inputFileName = "input.txt";
    string outputFileName = "compressed.txt";

    huffman.compress(inputFileName, outputFileName);
    cout << "Compression complete." << endl;

    return 0;
}


huffmann decoding.cpp
#include <bits/stdc++.h>
#include <fstream>
#include <sstream>
using namespace std;
struct Node {
    char a;
    int data;
    Node *left, *right;
    Node(int data,char a) {
        this->a=a;
        this->data = data;
        this->left = this->right = NULL;
    }
    Node(int data, Node *left, Node *right) {
        a='\0';
        this->data = data;
        this->left = left;
        this->right = right;
    }
};
 
struct Comparison {
    bool operator() (Node*a, Node*b) {
    return a->data > b->data; // for min heap
}
};
 
class HuffmanTree
{
    vector<string> ans;
    void treeTraversal(Node *root, string s,map<string,char>&m) {
        if (!root) return;
        if (!root->left && !root->right) {
            ans.push_back(s);
            m[s]=root->a;
            return;
        }
        treeTraversal(root->left, s + "0",m);
        treeTraversal(root->right, s + "1",m);
    }  
public:
void huffmantree(string S,vector<int> f,int N,map<string,char>&mp)
{
    priority_queue<Node*, vector<Node*>, Comparison> pq;
    for (int i = 0; i < N; i++) {
        pq.push(new Node(f[i],S[i]));
    }
    while (pq.size() > 1) {
        Node *a = pq.top();
        pq.pop();
        Node *b = pq.top();
        pq.pop();
        Node *newNode = new Node(a->data + b->data, a, b);
        pq.push(newNode);
    }
    Node*treeroot = pq.top();
    treeTraversal(treeroot, "",mp);
}
};
string decode_file(string s,map<string,char>&mp){
       string a="";
       string ans="";
       for(int i=0;i<s.size();i++){
          a.push_back(s[i]);
          if(mp.find(a)!=mp.end()){ 
            ans.push_back(mp[a]);
            a="";
           }
       }
       return ans;
 }

string readFileAsString(const string& fileName) {
    ifstream inputFile(fileName);
    if (!inputFile.is_open()) {
        cerr << "Error opening file!" << endl;
        return "";
    }
    // Use a stringstream to read the file contents into a string
    stringstream buffer;
    buffer << inputFile.rdbuf();
    inputFile.close();
    return buffer.str();
}
int main(){
    //From Given frequency map
    string s="kjpxK.hcedyConaw gtrulisif,";

    vector<int>freq={2,1,8,1,1,3,7,4,17,7,2,1,16,8,6,1,29,6,14,7,6,4,5,5,1,2,1};

    HuffmanTree huff;

    Node* tree_root;
    map<string,char>mp;
    huff.huffmantree(s,freq,s.size(),mp);
    
    string filename="compressed.txt";
    string encoded=readFileAsString(filename);
    string decoded=decode_file(encoded,mp);
    cout<<decoded<<endl;
    string file_path = "decoded.txt";
    ofstream outFile(file_path);
    if (outFile.is_open()) {
        outFile << decoded;          
        outFile.close();             
    }             
    
}
