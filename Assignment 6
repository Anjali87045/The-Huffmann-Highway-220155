q1.cpp
#include <iostream>
#include <vector>
#include <list>
#include <unordered_set>
using namespace std;
void add_edge(int src,int des,vector<list<int>>&graph,bool bi_dir=true){
    graph[src].push_back(des);
    if(bi_dir){
        graph[des].push_back(src);
    }
}
void display(vector<list<int>>&graph){
    for(int i=0;i<graph.size();i++){
        cout<<i<<"->";
        for(auto ele:graph[i]){
            cout<<ele<<",";
        }
        cout<<endl;
    }
}
void dfs(int curr,int end,vector<list<int>>&undirected_graph,unordered_set<int>&isvisited,vector<vector<int>>&all_paths,vector<int>&paths){
    if(curr==end){
        paths.push_back(curr);
        all_paths.push_back(paths);
        paths.pop_back();
        return;
    }
    paths.push_back(curr);
    isvisited.insert(curr);
    for(auto neighbour:undirected_graph[curr]){
        if(isvisited.find(neighbour)==isvisited.end()){
          dfs(neighbour,end,undirected_graph,isvisited,all_paths,paths);
        }
    }
    isvisited.erase(curr);
    paths.pop_back();
}
void path(int src,int end,vector<list<int>>&undirected_graph,unordered_set<int>&isvisited,vector<vector<int>>&all_paths,vector<int>&paths){
    dfs(src,end,undirected_graph,isvisited,all_paths,paths);
}
int main(){
    int v;
    cin>>v;
    int e;
    cin>>e;
    vector<list<int>>undirected_graph(v);
    unordered_set<int>isvisited;
    vector<vector<int>>all_paths;
    vector<int>paths;
    while(e--){
        int s,d;
        cin>>s>>d;
        add_edge(s,d,undirected_graph);
    }
    int st,en;
    cin>>st>>en;
    path(st,en,undirected_graph,isvisited,all_paths,paths);
    for(auto ele:all_paths){
        for(auto i:ele){
            cout<<i<<" ";
        }
        cout<<endl;
    }
}
q2.cpp
#include <iostream>
#include <vector>
#include <list>
#include <unordered_set>
using namespace std;
bool dfs(int node, int curCount, int n, vector<int>& vis, vector<vector<int>>&adj){
        vis[node] = 1;
        curCount += 1;
        if(curCount == n){
            return true;
        }
        for(int i=0; i<adj[node].size(); i++){
            if(vis[adj[node][i]] == 0){
                if(dfs(adj[node][i], curCount, n, vis, adj)){
                    return true;
                }
            }
        }
        vis[node] = 0;
        return false;
    }
    bool check(int N,vector<vector<int>>adj)
    {
         vector<int> vis(N+1,0);
         for(int i=1; i<N+1; i++){
             if(vis[i] == 0){
                 if(dfs(i, 0, N, vis, adj)){
                     return true;
                 }
             }
         }
         return false;
    }
int main(){
    int v;
    cin>>v;
    vector<vector<int>>adj(v,vector<int>(v));
    vector<vector<int>>adj_list(v+1);
    for(int i=0;i<v;i++){
        for(int j=0;j<v;j++){
          cin>>adj[i][j];
          if(adj[i][j]==1) adj_list[i+1].push_back(j+1);
     }
    }
    cout<<check(v,adj_list);
}



q3.cpp
#include <iostream>
#include <vector>
#include <queue>
#include <tuple>

using namespace std;

const int directions[6][3] = {{-1, 0, 0}, {1, 0, 0},{0, -1, 0}, {0, 1, 0},{0, 0, -1}, {0, 0, 1}};

bool isValid(int x, int y, int z, int X, int Y, int Z, const vector<vector<vector<int>>>& grid, const vector<bool>& visited) {
    int index = x * Y * Z + y * Z + z;
    return x >= 0 && x < X && y >= 0 && y < Y && z >= 0 && z < Z && grid[x][y][z] == 0 && !visited[index];
}

int shortestPath3D(int X, int Y, int Z, int xs, int ys, int zs, int xd, int yd, int zd, const vector<vector<vector<int>>>& grid) {
    if (grid[xs][ys][zs] == 1 || grid[xd][yd][zd] == 1) return -1;
    
    vector<bool> visited(X * Y * Z, false);
    queue<tuple<int, int, int, int>> q;
    q.push(make_tuple(xs, ys, zs, 0));
    visited[xs * Y * Z + ys * Z + zs] = true;

    while (!q.empty()) {
        auto front = q.front();
        int x = get<0>(front);
        int y = get<1>(front);
        int z = get<2>(front);
        int dist = get<3>(front);
        q.pop();

        if(x==xd && y==yd && z==zd) return dist;

        for (const auto& dir:directions) {
            int nx = x + dir[0], ny = y + dir[1], nz = z + dir[2];
            int index = nx * Y * Z + ny * Z + nz;
            if (isValid(nx, ny, nz, X, Y, Z, grid, visited)) {
                q.push(make_tuple(nx, ny, nz, dist + 1));
                visited[index] = true;
            }
        }
    }
    return -1;
}

int main() {
    int X, Y, Z;
    cin>>X>>Y>>Z;

    int xs, ys, zs, xd, yd, zd;
    cin >> xs >> ys >> zs >> xd >> yd >> zd;

    vector<vector<vector<int>>> grid(X, vector<vector<int>>(Y, vector<int>(Z)));
    for (int x = 0; x < X; ++x) {
        for (int y = 0; y < Y; ++y) {
            for (int z = 0; z < Z; ++z) {
                cin >> grid[x][y][z];
            }
        }
    }

    int result=shortestPath3D(X,Y,Z,xs,ys,zs,xd,yd,zd,grid);
    if (result==-1) {
        cout<<"No path exists"<<endl;
    } else {
        cout<<"Shortest path length is:"<<result<<endl;
    }
}
