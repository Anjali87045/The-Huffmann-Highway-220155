q1.text
This code will not show any error because the syntax i[arr] is equivalent to the syntax arr[i];
q2.text
For arr,it prints the address of the first element of the array while for the ch it will print the string.
It is because cout behaves differently for int* pointer and char* pointer.It prints the address for int* pointer while 
the character for char* pointer.
q3.cpp
#include <iostream>
using namespace std;
 struct ListNode {
     int val;
     ListNode *next;
     ListNode() : val(0), next(nullptr) {}
     ListNode(int x) : val(x), next(nullptr) {}
     ListNode(int x, ListNode *next) : val(x), next(next) {}
  };
ListNode* reverse(ListNode* head){
        if(!head) return head;
        ListNode*prev=NULL;
        ListNode*curr=head;
        ListNode*next=curr;
        while(curr){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    bool isPalindrome(ListNode* head) {
        ListNode* slow=head;
        ListNode* fast=head;
        while(fast->next&&fast->next->next){
            slow=slow->next;
            fast=fast->next->next;
        }
        ListNode*a=head;
        ListNode*b=reverse(slow->next);
        while(b){
            if(a->val!=b->val) return false;
            a=a->next;
            b=b->next;
        }
        return true;
    }
int main(){
    
}
q4.cpp
#include <iostream>
using namespace std;
 struct ListNode {
     int val;
     ListNode *next;
     ListNode() : val(0), next(nullptr) {}
     ListNode(int x) : val(x), next(nullptr) {}
     ListNode(int x, ListNode *next) : val(x), next(next) {}
  };
ListNode* rotateRight(ListNode* head, int k) {
        if(!head || !head->next ) return head;
        int len=0;
        ListNode* temp=head;
        while(temp){
            temp=temp->next;
            len++;
        }
        k=k%len;
        if(k==0) return head;
        temp=head;
        for(int i=1;i<=len-k-1;i++){
            temp=temp->next;
        }
        ListNode* temp2=temp->next;
        ListNode* ans=temp2;
        while(temp2->next){
            temp2=temp2->next;
        }
        temp->next=NULL;
        temp2->next=head;
        return ans;
    }
int main(){
    
}
q5.cpp
#include <iostream>
#include <string>
#include <vector>
#include <queue>
using namespace std;
string lexo_small(string s){
    string p=s+s;
    priority_queue<string>pq;
    for(int i=0;i<s.length();i++){
       string q="";
       for(int j=i;j<i+s.length();j++){
          q.push_back(p[j]);
       }
       pq.push(q);
       if(pq.size()>1) pq.pop();
    }
    return pq.top();
}
int main(){
    string s="cbabde";
    cout<<lexo_small(s);
}
q6.cpp
#include <iostream>
#include <string>
#include <vector>
#include <queue>
using namespace std;
class Node{
    int val;
    Node* left;
    Node* right;
    Node(int val){
        this->val=val;
        left=NULL;
        right=NULL;
    }
    bool isIsomorphic(Node *a,Node *b){
        if(a==NULL&&b==NULL) return true;
        if(a!=NULL&&b!=NULL) return isIsomorphic(a->left,b->left)&&isIsomorphic(a->right,b->right);
        return false;
    }
};
int main(){
    
}
